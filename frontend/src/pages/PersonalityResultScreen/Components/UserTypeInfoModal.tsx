import React from 'react';
import {
    Modal,
    View,
    TouchableWithoutFeedback,
    TouchableOpacity,
    ScrollView,
    StyleSheet,
    Dimensions,
} from 'react-native';
import Text from '../../../components/Common/Text';
import colors from '../../../../assets/colors';

const { height: SCREEN_HEIGHT, width: SCREEN_WIDTH } = Dimensions.get("window");

interface UserTypeInfoModalProps {
    visible: boolean;
    onClose: () => void;
}

const DATA = [
    {
        id: 1,
        title: "üåç Í∞ÄÏπòÍ¥Ä",
        description: "ÏùòÏÇ¨Í≤∞Ï†ïÏóêÏÑú ÌòÑÏã§Ï†ÅÏù∏ ÏöîÏÜåÏôÄ Ïù¥ÏÉÅÏ†ÅÏù∏ ÏöîÏÜå Ï§ë Ïñ¥Îäê Ï™ΩÏùÑ Îçî Í≥†Î†§ÌïòÎäîÍ∞Ä?",
        traitA: {
            name: "Pragmatism",
            short: "P",
            definition: "ÌòÑÏã§ÏùÑ Ïö∞ÏÑ†",
            example: "Ïã§Ïö©Ï†ÅÏù∏ Ìï¥Í≤∞Ï±ÖÏù¥ Ï§ëÏöî"
        },
        traitB: {
            name: "Idealism",
            short: "I",
            definition: "Ïù¥ÏÉÅÏ†ÅÏù∏ Í∞ÄÏπòÎ•º Ï∂îÍµ¨",
            example: "Ïù¥ÏÉÅÏ†Å Î™©ÌëúÎ•º Ï∂îÍµ¨"
        }
    },
    {
        id: 2,
        title: "ü§ù ÏÇ¨ÌöåÍ¥Ä",
        description: "Í∞úÏù∏Ïùò ÏûêÏú†ÏôÄ Í≥µÎèôÏ≤¥Ïùò Ï°∞Ìôî Ï§ë Ïñ¥Îäê Ï™ΩÏùÑ Îçî Ï§ëÏöîÌïòÍ≤å ÏÉùÍ∞ÅÌïòÎäîÍ∞Ä?",
        traitA: {
            name: "Individualism",
            short: "N",
            definition: "Í∞úÏù∏Ïùò ÏûêÏú†Î•º Ï§ëÏãú",
            example: "ÏûêÏú†ÏôÄ Í≤ΩÏüÅÏù¥ Ï§ëÏöî"
        },
        traitB: {
            name: "Collectivism",
            short: "C",
            definition: "Í≥µÎèôÏ≤¥ÏôÄ ÌòëÎ†•ÏùÑ Ï§ëÏãú",
            example: "ÌòëÎ†•Í≥º Ï°∞ÌôîÍ∞Ä Îçî Ï§ëÏöî"
        }
    },
    {
        id: 3,
        title: "‚ö° ÎØ∏ÎûòÍ¥Ä",
        description: "Í∏∞Ïà† Î∞úÏ†ÑÍ≥º ÌôòÍ≤Ω Î≥¥Ìò∏ Ï§ë Ïñ¥Îäê Ï™ΩÏùÑ Îçî Ïö∞ÏÑ†Ìï¥Ïïº ÌïúÎã§Í≥† ÏÉùÍ∞ÅÌïòÎäîÍ∞Ä?",
        traitA: {
            name: "Technological Progress",
            short: "T",
            definition: "Í∏∞Ïà† Î∞úÏ†ÑÏùÑ Ï§ëÏãú",
            example: "Í∏∞Ïà† ÌòÅÏã†Ïù¥ ÎØ∏ÎûòÎ•º Î∞îÍæºÎã§"
        },
        traitB: {
            name: "Sustainability",
            short: "S",
            definition: "ÏßÄÏÜç Í∞ÄÎä•Ìïú ÌôòÍ≤Ω Î≥¥Ìò∏Î•º Ï§ëÏãú",
            example: "ÌôòÍ≤Ω Î≥¥Ìò∏Í∞Ä Îçî ÏãúÍ∏âÌïòÎã§"
        }
    },
    {
        id: 4,
        title: "üéØ ÏÑ±Ï∑®Í¥Ä",
        description: "ÏïàÏ†ïÏ†ÅÏù∏ ÏÇ∂Í≥º ÏÉàÎ°úÏö¥ ÎèÑÏ†Ñ Ï§ë Ïñ¥Îñ§ Í∞ÄÏπòÎ•º Îçî Ï§ëÏãúÌïòÎäîÍ∞Ä?",
        traitA: {
            name: "Stability",
            short: "B",
            definition: "ÏïàÏ†ïÏ†ÅÏù∏ ÏÇ∂ÏùÑ Ï∂îÍµ¨",
            example: "ÏïàÏ†ïÏ†ÅÏù∏ ÏßÅÏû•Ïù¥ Ï§ëÏöî"
        },
        traitB: {
            name: "Risk-taking",
            short: "R",
            definition: "ÎèÑÏ†ÑÏùÑ ÌÜµÌï¥ ÏÑ±Ïû•ÏùÑ Ï∂îÍµ¨",
            example: "ÎèÑÏ†ÑÏùÑ ÌÜµÌï¥ ÏÑ±Ïû•Ìï¥Ïïº"
        }
    }
];

const UserTypeInfoModal = ({ visible, onClose }: UserTypeInfoModalProps) => {
    return (
        <Modal transparent visible={visible} animationType="fade">
            <TouchableWithoutFeedback onPress={onClose}>
                <View style={styles.overlay}>
                    <TouchableWithoutFeedback>
                        <View style={styles.modalContainer}>
                            <View style={styles.scrollWrapper}>
                                <ScrollView
                                    style={styles.scrollView}
                                    contentContainerStyle={styles.scrollContent}
                                    showsVerticalScrollIndicator={true}
                                >
                                    {DATA.map((item) => (
                                        <View key={item.id} style={styles.section}>
                                            <Text style={styles.title}>{item.title}</Text>
                                            <Text style={styles.description}>{item.description}</Text>

                                            <View style={styles.traitsContainer}>
                                                <View style={styles.traitBox}>
                                                    <Text style={styles.traitShort}>{item.traitA.short}</Text>
                                                    <Text style={styles.traitName}>{item.traitA.name}</Text>
                                                    <Text style={styles.traitDefinition}>{item.traitA.definition}</Text>
                                                    <Text style={styles.traitExample}>{item.traitA.example}</Text>
                                                </View>

                                                <View style={styles.traitBox}>
                                                    <Text style={styles.traitShort}>{item.traitB.short}</Text>
                                                    <Text style={styles.traitName}>{item.traitB.name}</Text>
                                                    <Text style={styles.traitDefinition}>{item.traitB.definition}</Text>
                                                    <Text style={styles.traitExample}>{item.traitB.example}</Text>
                                                </View>
                                            </View>
                                        </View>
                                    ))}
                                </ScrollView>
                            </View>

                            {/* Ìï≠ÏÉÅ ÌïòÎã®Ïóê Í≥†Ï†ïÎêòÎäî Îã´Í∏∞ Î≤ÑÌäº */}
                            <TouchableOpacity style={styles.closeButton} onPress={onClose}>
                                <Text style={styles.closeButtonText}>Îã´Í∏∞</Text>
                            </TouchableOpacity>
                        </View>
                    </TouchableWithoutFeedback>
                </View>
            </TouchableWithoutFeedback>
        </Modal>


    );
};

export default UserTypeInfoModal;

const styles = StyleSheet.create({
    overlay: {
        flex: 1,
        backgroundColor: colors.blurbackgroundColor,
        justifyContent: 'center',
        alignItems: 'center',
    },
    modalContainer: {
        backgroundColor: colors.white,
        borderRadius: 15,
        width: '90%',
        maxHeight: '85%',
        overflow: 'hidden',
        flexDirection: 'column',
    },
    scrollWrapper: {
        flex: 1,
    },
    scrollView: {
        paddingHorizontal: 20,
    },
    scrollContent: {
        paddingVertical: 20,
        paddingBottom: 40,
    },
    section: {
        marginBottom: 30,
    },
    title: {
        fontSize: 20,
        fontWeight: 'bold',
        marginBottom: 6,
        textAlign: 'center',
    },
    description: {
        fontSize: 14,
        color: '#444',
        textAlign: 'center',
        marginBottom: 12,
    },
    traitsContainer: {
        flexDirection: 'row',
        justifyContent: 'space-between',
        paddingHorizontal: 10, // Ï¢åÏö∞ Ïó¨Î∞± Ï∂îÍ∞Ä
    },
    traitBox: {
        flex: 1,
        backgroundColor: '#f6f6f6',
        borderRadius: 8,
        padding: 10,
        marginHorizontal: 5, // traitBox ÏÇ¨Ïù¥ Ïó¨Î∞±
    },
    traitShort: {
        fontSize: 16,
        fontWeight: 'bold',
        marginBottom: 2,
        color: colors.primary,
    },
    traitName: {
        fontSize: 15,
        fontWeight: '600',
    },
    traitDefinition: {
        fontSize: 13,
        marginTop: 4,
    },
    traitExample: {
        fontSize: 12,
        marginTop: 4,
        fontStyle: 'italic',
        color: '#666',
    },
    closeButton: {
        backgroundColor: colors.yesDark,
        paddingVertical: 12,
        borderRadius: 8,
        alignItems: 'center',
        marginHorizontal: 20,
        marginBottom: 12,
    },
    closeButtonText: {
        color: colors.white,
        fontSize: 16,
        fontWeight: '600',
    },
});
