pipeline {
    agent any

    environment {
        COMPOSE_PATH = "docker-compose.app.yml"
        BACKEND_IMAGE_NAME = "backend:latest"
        REGISTRY_IMAGE_NAME = "eenzzi/square:latest"
    }

    stages {
        stage('Checkout') {
            steps {
                echo "GitLab에서 코드 클론 중..."
                checkout scm
             }
        }

        stage('Build Backend') {
            steps {
                echo "백엔드 gradle 빌드 시작"
                dir('backend') {
                    sh './gradlew clean build -x test'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                echo "백엔드 Docker 이미지 빌드"
                sh '''
                    docker build \
                      -t ${BACKEND_IMAGE_NAME} \
                      -f devops/docker/backend.Dockerfile \
                      .
                '''
            }
        }

        stage('Tag & Push to DockerHub') {
            steps {
                withCredentials([usernamePassword(
                    credentialsId: 'docker-hub',
                    usernameVariable: 'USERNAME',
                    passwordVariable: 'TOKEN'
                )]) {
                    sh '''
                        docker tag ${BACKEND_IMAGE_NAME} ${REGISTRY_IMAGE_NAME}
                        echo "$TOKEN" | docker login -u "$USERNAME" --password-stdin
                        docker push ${REGISTRY_IMAGE_NAME}
                    '''
                }
            }
        }

        stage('Deploy App') {
            steps {
                echo "앱 재배포 (docker-compose.app.yml)"
                sh '''
                    echo "기존 백엔드 컨테이너 제거"
                    docker container rm -f backend || true

                    echo "최신 이미지 pull 후 실행"
                    docker pull ${REGISTRY_IMAGE_NAME}

                    echo "백엔드 컨테이너만 재빌드 및 실행"
                    docker-compose -p square --env-file .env -f ${COMPOSE_PATH} up -d --build backend
                '''
            }
        }
    }

    post {
        success {
            echo "배포 성공"
        }
        failure {
            echo "배포 실패. 로그를 확인하세요."
        }
    }
}
